"""
Django settings for MultiPass project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from decouple import config
from django.contrib.messages import constants as messages
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure--t&6j5l$bmh5a$9x-=q#_$m96i$hwn_6@+oivb+h=5q9+$gj5i'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '8630-185-163-26-70.ngrok-free.app',
                 '74cd-185-163-26-70.ngrok-free.app']

CSRF_TRUSTED_ORIGINS = [
    'https://74cd-185-163-26-70.ngrok-free.app'

]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'MultiPass.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

            ],
        },
    },
]

WSGI_APPLICATION = 'MultiPass.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'satic/'
STATICFILES_DIRS = [BASE_DIR / "static"]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


MESSAGE_TAGS = {
    messages.DEBUG: "secondary",
    messages.INFO: "info",
    messages.SUCCESS: "success",
    messages.WARNING: "warning",
    messages.ERROR: "danger",
}


# Email_Password_Auth conf starting

# Email_Configurations
EMAIL_HOST = config("EMAIL_HOST")
EMAIL_PORT = config("EMAIL_PORT", cast=int)
EMAIL_HOST_USER = config("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD")
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = "Your website name"


INSTALLED_APPS += [
    # allauth
    'allauth',
    'allauth.account',
    'auth_providers.email_password_auth',
    # OTP
    'django_otp',        # Core OTP app
    'django_otp.plugins.otp_email',   # Email-based OTP support
    'django_otp.plugins.otp_static',  # Static OTP tokens
    'django_otp.plugins.otp_totp',    # Time-based OTP token
]

MIDDLEWARE += [
    'allauth.account.middleware.AccountMiddleware',
    'auth_providers.email_password_auth.middleware.otp_required_middleware.OTPRequiredMiddleware',
]

TEMPLATES[0]['OPTIONS']['context_processors'] += [
    'django.template.context_processors.request',
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]
# ACCOUNT_LOGIN_ON_SIGNUP = False
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'  # Use email for login
ACCOUNT_EMAIL_VERIFICATION = 'optional'  # 'optional' or 'mandatory'
# Prevent automatic login after confirmation
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = False
# Avoid misleading error messages during login
ACCOUNT_PREVENT_ENUMERATION = False

ACCOUNT_RATE_LIMITS = {
    "login_failed": "3/m",  # Limit to 5 attempts per minute and 20 attempts per hour
    # Allow 2 password resets per minute by IP, 2 password by Email key
    # "password_reset": ["2/m/ip", "2/m/key"],
}
# Session settings
# Allow long-lived sessions when "Remember Me" is checked
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_COOKIE_AGE = 1209600  # 2 weeks in seconds for "Remember Me"

LOGIN_REDIRECT_URL = 'redirect_after_login'
LOGOUT_REDIRECT_URL = 'account_login'
ACCOUNT_LOGOUT_REDIRECT_URL = 'account_login'

# Email_Password_Auth conf ending


# Google_auth starting
INSTALLED_APPS += [
    'auth_providers.google_auth',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
]
SITE_ID = 1


SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': config('GOOGLE_CLIENT_ID'),
            'secret': config('GOOGLE_SECRET'),
            'key': ''
        },
        'SCOPE': [
            'profile',
            'email',
        ],
    }
}
# Google_auth ending


# Facebook_auth starting
INSTALLED_APPS += [
    'auth_providers.facebook_auth',
    'allauth.socialaccount.providers.facebook',
]
SOCIALACCOUNT_PROVIDERS.update({
    'facebook': {
        'METHOD': 'oauth2',
        'SDK_VERSION': 'v12.0',
        'SCOPE': ['email', 'public_profile'],
        'AUTH_PARAMS': {'auth_type': 'reauthenticate'},
        'INIT_PARAMS': {'cookie': True},
        'FIELDS': [
            'id',
            'email',
            'name',
            'first_name',
            'last_name',
        ],
        'EXCHANGE_TOKEN': True,
        'LOCALE_FUNC': lambda request: 'en_US',
        'VERIFIED_EMAIL': False,
        'VERSION': 'v12.0',
        'APP': {
            'client_id': config('FACEBOOK_CLIENT_ID'),
            'secret': config('FACEBOOK_SECRET'),
            'key': ''
        },
    }
})

# Facebook_auth ending

# Twitter_auth starting
INSTALLED_APPS += [
    'auth_providers.twitter_oauth',
    'allauth.socialaccount.providers.twitter',
]
SOCIALACCOUNT_PROVIDERS.update({
    'twitter': {
        'APP': {
            'client_id': config('TWITTER_CLIENT_ID'),
            'secret': config('TWITTER_SECRET'),
        },
    }
})
# Twitter_auth ending
